import java.util.*;

public class mergesort
{
    static int inversioncount=0;
    public static int[] mergesort2arrays(int[] lsort,int[] rsort)
    {
        int[] res=new int[rsort.length+lsort.length];

        int i=0;
        int j=0;
        int k=0;

        while(i<lsort.length && j<rsort.length)
        {
            if(lsort[i]<rsort[j])
            {
                res[k++]=lsort[i++];
            }

            else
            {
                res[k++]=rsort[j++];
                inversioncount+=lsort.length-i;
            }
        }

        while(i<lsort.length)
        {
            res[k++]=lsort[i++];
        }

        while(j<rsort.length)
        {
            res[k++]=rsort[j++];
        }

        return res;
    }
    public static int[] mergesort(int[] arr,int lo,int hi)
    {
        if(lo==hi)
        {
            return new int[] {arr[lo]};
        }

        int mid=(lo+hi)/2;

        int[] lsort=mergesort(arr,lo,mid);
        int[] rsort=mergesort(arr,mid+1,hi);

        int[] fsort=mergesort2arrays(lsort,rsort);

        return fsort;
        
    }

    public static void main(String[] args)
    {
        int[] arr={2,5,1,8,6,3,7,4};
        int[] fsort=mergesort(arr,0,arr.length-1);

        System.out.println();
        System.out.println(Arrays.toString(fsort));
        System.out.println("\ninversion count= "+inversioncount);
    }
}
